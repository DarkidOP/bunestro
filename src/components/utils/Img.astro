---
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";

interface Props {
  src: string;
  alt: string;
  width: number;
  height: number;
  className?: string;
  loading?: "eager" | "lazy";
}

const {
  src,
  alt,
  width,
  height,
  className = "",
  loading = "lazy",
} = Astro.props;
const aspectRatio = `${width} / ${height}`;
const showAltText = width > 100 && height > 100;
---

<div
  class={cn("relative w-full overflow-hidden", className)}
  style={{
    aspectRatio: aspectRatio,
    maxWidth: `${width}px`,
  }}
>
  <Skeleton
    className="absolute top-0 left-0 w-full h-full rounded-none error-skeleton"
  />
  <div
    class="hidden absolute inset-0 items-center justify-center text-red-600 flex-col error-icon"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="w-[30%] h-[30%] min-w-[30px] min-h-[30px] max-w-[40px] max-h-[40px]"
    >
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>
    {showAltText && <span class="mt-2 text-sm text-center px-2">{alt}</span>}
  </div>
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class="absolute top-0 left-0 w-full h-full object-cover opacity-0 transition-opacity duration-300 img_custom_lazy_loading"
    loading={loading}
    onload="this.classList.remove('opacity-0'); clearTimeout(Number(this.getAttribute('data-timeout-id')));"
    onerror="this.previousElementSibling.style.display = 'flex'; this.previousElementSibling.previousElementSibling.classList.add('pause-animation');"
  />
</div>

<style>
  .pause-animation {
    animation-play-state: paused !important;
  }
</style>

<script>
  // Add timeout for each image
  document.querySelectorAll(".img_custom_lazy_loading").forEach((img) => {
    const timeoutId = setTimeout(() => {
      if (
        !(img as HTMLImageElement).complete ||
        (img as HTMLImageElement).naturalWidth === 0
      ) {
        const errorIcon = img.previousElementSibling;
        const skeleton = errorIcon?.previousElementSibling;
        if (errorIcon) {
          (errorIcon as HTMLElement).style.display = "flex";
          skeleton?.classList.add("pause-animation");
        }
      }
    }, 10000);

    // Store timeoutId in a data attribute instead
    img.setAttribute("data-timeout-id", timeoutId.toString());
  });
</script>
