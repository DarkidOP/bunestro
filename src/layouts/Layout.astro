---
import "@/styles/globals.css";
import "@/styles/customGlobals.css";
// custom fonts https://docs.astro.build/en/guides/fonts/
import "@fontsource-variable/montserrat";

import Metadata from "@/components/utils/Metadata.astro";
type Props = {
  title?: string;
};
const { title }: Props = Astro.props;

// components
import { ModeToggle } from "@/components/ui/theme-selector";
import { ScrollToTopButton } from "@/components/utils/TopButton";
import { Toaster } from "@/components/ui/toaster";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <Metadata {title} />
  </head>
  <body>
    <ScrollToTopButton client:load className="fixed bottom-4 right-4 z-50" />
    <slot />
    <ModeToggle
      client:load
      className="fixed left-2 bottom-2 z-50"
      iconClassName="size-3"
    />
    <Toaster client:load />
  </body>
</html>

<script is:inline>
  // for theme data
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
<style>
  html,
  body {
    font-family: "Montserrat Variable", sans-serif;
  }
</style>
